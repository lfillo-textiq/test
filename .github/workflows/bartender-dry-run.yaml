name: Bartender Dry Run
on:
  workflow_dispatch:
    inputs:
      bartender_command:
        description: 'Bartender CLI command'
        required: true
        default: 'bartender -v'
      release_manager:
        description: 'Id of slack user which triggered this workflow'
        required: true
        default: 'U020CNBGDQA'       
jobs:
  start-runner:
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BARTENDER_PAT }}
          ec2-image-id: ami-0ee1d7fcd2f218352
          ec2-instance-type: m4.xlarge
          subnet-id: subnet-0d555ae59e4497dfe
          security-group-id: sg-0c3a1012d21a04155
  upload-workflow-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Store inputs in file
        env:
          WORKFLOW_INPUTS: ${{ toJSON(github.event.inputs) }}
        run: echo "$WORKFLOW_INPUTS" > /tmp/inputs.json
      - name: Upload inputs artifact
        uses: actions/upload-artifact@v2
        with:
          name: workflow-inputs
          path: /tmp/inputs.json
  run-bartender-command:
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs: start-runner
    steps:   
      - uses: actions/checkout@v2
      - name: Add secrets.config
        run: sudo touch /usr/local/etc/secrets.config
      - name: Add secrets to config 
        run: |
          echo "BUILD_AWS_SECRET_ACCESS_KEY=${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}" >> /usr/local/etc/secrets.config
          echo "UAT_AWS_SECRET_ACCESS_KEY=${{ secrets.UAT_AWS_SECRET_ACCESS_KEY }}" >> /usr/local/etc/secrets.config
          echo "PROD_AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> /usr/local/etc/secrets.config
          echo "GITHUB_PAT=${{ secrets.BARTENDER_PAT }}" >> /usr/local/etc/secrets.config
      - name: Install latest bartender binary
        run: |
          sudo pip3 install PyGithub==1.55
          sudo GITHUB_PAT=${{ secrets.BARTENDER_PAT}} python3 ./scripts/install_latest_bartender.py
      - name: unzip bartender binary [REMOVE ME]
        run: unzip bartender.zip
      - name: Execute bartender command [REMOVE ME ./]
        id: command
        env:
          HOME: /root # root user doesn't have HOME defined
        run: |
          set -o pipefail
          ./${{ github.event.inputs.bartender_command }} -D -d -s 2>&1 | tee /tmp/bartender.log
          echo ::set-output name=exit-code::$?
      - name: Get last line of bartender.log (release process output object, all other lines are logs)
        if:  ${{ success() || failure() }}
        run: echo $(tail -1 /tmp/bartender.log) > /tmp/outputs.json
      - name: Upload bartender outputs file
        if:  ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: bartender-command-outputs
          path: /tmp/outputs.json
      - name: Set release file path if no failiures
        if: ${{ steps.command.outputs.exit-code == 0 && success() }}
        id: relfile
        run: | 
          echo ::set-output name=path::$(cat /tmp/outputs.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["release_file"]["path"])')    
      - name: Upload dry run release file if no failiures
        if: ${{ steps.command.outputs.exit-code == 0 && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: bartender-dry-run-relfile
          path: ${{ steps.relfile.outputs.path}}
  stop-runner:
    needs:
      - start-runner 
      - run-bartender-command
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BARTENDER_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
